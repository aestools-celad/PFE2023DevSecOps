
# Define stages
image: docker:20.10.16

stages:

  - Build
  - unitTest
  - testSast
  - archive
  - Push
  - Trivy
  - runDASTScanUsingZAP
  - deploy
  
  
# Define variables
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  BUILD_DOCKER_IMAGE_VERSION: "V1"
  BUILD_DOCKER_BACK_IMAGE_VERSION: "v1"
  DOCKER_DIND_IMAGE: "docker:20.10.16-dind" 
  DOCKER_CLIENT_IMAGE: "docker:20.10.16" 
  BUILD_IMAGE_FRONT: "my-frontend-image"
  BUILD_IMAGE_BACK: "my-backend-image"
######################################
  SOURCE_IMAGE: registry.gitlab.com/security-products/container-scanning:5
  TARGET_IMAGE: $CI_REGISTRY/namespace/container-scanning
######################################
  CURL_IMAGES: "curlimages/curl:7.87.0"

  POSTMAN_IMAGES: "postman/newman:5-alpine"

  POSTGRES_DB: "EV_database"
  POSTGRES_USER: "renault_admin"
  POSTGRES_PASSWORD: "wellop"


  CONTAINER_TEST_FRONT_IMAGE: $CI_REGISTRY_IMAGE:latest
  CONTAINER_TEST_FRONT_IMAGE: $CI_REGISTRY_IMAGE:latest
  CI_REGISTRY_IMAGE: registry.gitlab.com/houda99/renault-application

 # GITLAB_AUTH_TOKEN: $CI_JOB_TOKEN
 # CI_PROJECT_DIR : ./back-end/RenaultEV_RestAPI/
 # SONAR_URL: https://7f17-197-240-179-110.ngrok-free.app
  SONAR_LOGIN : renault
  SONAR_PASSWORD : renault

  DOCKER_HOST: tcp://docker:2375
  #
  # This instructs Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""


  # name of the image for docker
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/$BUILD_IMAGE_FRONT:$BUILD_DOCKER_IMAGE_VERSION
  # DAST settings
  DAST_WEBSITE: http://renaultapp.com
  # do a full scan
  DAST_FULL_SCAN_ENABLED: "true"
  DAST_VERSION: 4
  # Setting this variable will affect all Security templates
  # (SAST, Dependency Scanning, ...)
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  DAST_IMAGE_SUFFIX: ""



#include:

 # - template: Security/DAST.gitlab-ci.yml

services:
  - docker:20.10.16-dind


###########################################################################

##############*********THE FRONTEND PIPELINE*******########################

###########################################################################

#****************************BUILD FRONT IMAGE******************************

.build-frontend:
  stage: Build
  tags:
    - renault-runner
  image: node:18.10.0-alpine3.15
  #we use the rules to say that the job couldn't work if there isn't changes in this directory
 # rules:
  #  - changes:
   #   - './renaultApplication/**/*'
  

  cache:
    key:
      prefix: 'frontend'
      files:
        - './renaultApplication/package-lock.json'
    paths:
      - './renaultApplication/node_modules'
  before_script:
    - 'cd ./renaultApplication'
    - 'npm ci'
  script:
    - npm install -g @angular/cli
    - ng build 
  artifacts:
    paths:
       - renaultApplication/dist/

  #artifacts:
   # name: 'frontend-${CI_COMMIT_SHORT_SHA}'
    #paths:
     # - './renaultApplication/dist'

##########******SONARQUBE FOR THE FRONT *********##############

.sonarqube-check-front:
  stage: testSast
  tags:
    - renault-runner

  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  #dependencies:
   # - build-frontend
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache/back
  script: 
    - cd ./renaultApplication
    - sonar-scanner -Dsonar.projectKey=front -Dsonar.projectName='front' -Dsonar.sources=. -Dsonar.host.url=https://0c84-197-240-104-232.ngrok-free.app    -Dsonar.login=sqp_512e3d2896c1f20d704a2d7b7cbf2efb4dcf0d8e    -Dsonar.analysisCache.enabled=false
    
  allow_failure: true
  
#################***********archive the package of front end **********############

..package-job:
  stage: archive
  tags:
    - renault-runner
  image: alpine
  #dependencies:
   # - build-frontend
  variables:
    
  script:
    - 'cd ./renaultApplication'
    - apk add --no-cache nodejs npm
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=$DEPLOY_TOKEN" > .npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=$DEPLOY_TOKEN" >> .npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=$DEPLOY_TOKEN" >> .npmrc
    - echo "Created the following .npmrc:"; cat .npmrc
    - npm publish --access=public




##########******ADD TRIVY TO SCAN DOCKER IMAGES *********##############


.trivy_scan:
  
  image: docker:20.10.9
  
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    IMAGE: $CI_REGISTRY_IMAGE/$BUILD_IMAGE_FRONT:$BUILD_DOCKER_IMAGE_VERSION
   # IMAGE: registry.gitlab.com/houda99/renault-application/my-frontend-image:V1
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  allow_failure: true
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

   # - docker pull  "registry.gitlab.com/houda99/renault-application/my-frontend-image:$BUILD_DOCKER_IMAGE_VERSION" 
    - docker pull $IMAGE
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  allow_failure: true
  script:
    # Build image
    #- docker build -t $IMAGE .
    # Image report in table
    - ./trivy image --exit-code 0 --format table $IMAGE

    # Filesystem report in table
    #- ./trivy filesystem --security-checks config,vuln --exit-code 0 --format table . 
    - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format table ./renaultApplication

    # Image report
    - ./trivy image --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-image.json $IMAGE
    # Filesystem report
    - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-fs.json .
    # Combine report
    - apk update && apk add jq
    - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate_front.json
  cache:
    paths:
      - .trivycache/front/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    untracked: true

    paths:
      - gl-codeclimate_front.json
    reports:
      codequality: gl-codeclimate_front.json
  stage: Trivy
  tags:
    - renault-runner

##########******PUSH  FRONT IMAGE TO GITLAB REGISTORY *********##############

.push_front-job:
  stage: Push
  tags:
    - renault-runner
 


  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd ./renaultApplication
    - docker build --no-cache -t "$BUILD_IMAGE_FRONT":"$BUILD_DOCKER_IMAGE_VERSION" .
    - docker tag "$BUILD_IMAGE_FRONT":"$BUILD_DOCKER_IMAGE_VERSION" "$CI_REGISTRY_IMAGE/$BUILD_IMAGE_FRONT:$BUILD_DOCKER_IMAGE_VERSION"
    - docker push "$CI_REGISTRY_IMAGE/$BUILD_IMAGE_FRONT:$BUILD_DOCKER_IMAGE_VERSION"

 

######################################################################

#################*********THE BACKEND PIPELINE **********############

######################################################################


##############***********build backend ********###############

.build-back:
  tags:
    - renault-runner
  image: maven:3.6.3-jdk-11-slim
  #services:
   # - postgres:14.7
  stage: Build
  variables:
    POSTGRES_DB: EV_database
    POSTGRES_USER: renault_admin
    POSTGRES_PASSWORD: wellop
    SECURE_FILES_DOWNLOAD_PATH: './securefiles/'
  script: 
      - cd ./back-end/RenaultEV_RestAPI/ 
      - mvn clean package -B -DskipTests
     # - mvn deploy -Dmaven.repo.local=.m2/repository -Dmaven.test.skip=true --settings settings.xml
      
  
  artifacts:
    name: "renaultev-restapi"
    untracked: true
    paths:
      - ./back-end/RenaultEV_RestAPI/target/*.jar
     # - .m2/repository/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH




########################*********Unit tests for the backend ********#################
.unit_tests:
  stage: unitTest
  tags:
    - renault-runner
  image: maven:3.6.3-jdk-11
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: EV_database
    POSTGRES_USER: renault_admin
    POSTGRES_PASSWORD: wellop
  
  script:
    - cd ./back-end/RenaultEV_RestAPI
    #- mvn clean test jacoco:report 
    #Dspring.profiles.active=test
    - mvn test -Dspring.profiles.active=test

  artifacts:
    paths:
      - target/surefire-reports/


#####################**********Sonarqube for the backend *************####################



.sonarqube-check-back:
  stage: testSast
  tags:
    - renault-runner
  image: maven:3.6.3-jdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: 0  # Tells git to fetch all the branches of the project, required by the analysis task
  #dependencies:
   # - build-back
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache/back
  script: 
    - java -version
    - apt-get update
    - apt-get -y install curl jq
    - cd ./back-end/RenaultEV_RestAPI
    - mvn dependency:purge-local-repository
    - mvn compile

   # # HERE we have to run the server of SonarQube using an instance of a Docker image and connect it with GitLab. In my case, I used ngrok to open a tunnel between them.
    - mvn  --batch-mode sonar:sonar -Dsonar.projectKey=back -Dsonar.projectName='back' -Dsonar.host.url=https://0c84-197-240-104-232.ngrok-free.app  -Dsonar.token=sqp_a7c1e90c3737b35a1965132926a9ab145c25e617 -Dsonar.analysisCache.enabled=false
  allow_failure: true




.sonarqube-check-front:
  stage: testSast
  tags:
    - renault-runner

  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  dependencies:
    - build-frontend
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache/back
  script: 
    - cd ./renaultApplication
    - sonar-scanner -Dsonar.projectKey=front -Dsonar.projectName='front' -Dsonar.sources=. -Dsonar.host.url=https://b5f0-197-238-254-17.ngrok-free.app  -Dsonar.login=sqp_c7c4618723859998e704379782976721c83f42c2 -Dsonar.analysisCache.enabled=false
    
  allow_failure: true
  


###################**********Archive artifact for backend ********#################

.push_to_package_registry_back:
  tags:
    - renault-runner
  stage: archive
  image: maven:3.6.3-jdk-11-slim
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: EV_database
    POSTGRES_USER: renault_admin
    POSTGRES_PASSWORD: wellop
  script:
    - cd ./back-end/RenaultEV_RestAPI/
    - 'mvn deploy -s settings.xml -Dspring.config.location=/src/main/resources/application-local.properties'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  
  

################**************test backend image with trivy************################
.trivy_scan_back:
  
  image: docker:20.10.9
  
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    IMAGE: $CI_REGISTRY_IMAGE/$BUILD_IMAGE_BACK:$BUILD_DOCKER_IMAGE_VERSION
   # IMAGE: registry.gitlab.com/houda99/renault-application/my-frontend-image:V1
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  allow_failure: true
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

   # - docker pull  "registry.gitlab.com/houda99/renault-application/my-frontend-image:$BUILD_DOCKER_IMAGE_VERSION" 
    - docker pull $IMAGE
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  allow_failure: true
  script:
    # Build image
    
    # Image report in table
   # - ./trivy image --exit-code 0 --format table $IMAGE
    - ./trivy image --exit-code 0 --format table --timeout 10m $IMAGE

    # Filesystem report in table
    #- ./trivy filesystem --security-checks config,vuln --exit-code 0 --format table . 
    - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format table ./back-end/RenaultEV_RestAPI/

    # Image report
    - ./trivy image --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-image.json $IMAGE
    # Filesystem report
    - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-fs.json ./back-end/RenaultEV_RestAPI/
    # Combine report
    - apk update && apk add jq
    - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate_back.json
    - tar -czvf artifacts.tar.gz gl-codeclimate_back.json
  cache:
    paths:
      - .trivycache/back/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    untracked: true

    paths:
      - gl-codeclimate_back.json
    reports:
      codequality: gl-codeclimate_back.json
  stage: Trivy
  tags:
    - renault-runner


    
###############*********push backend docker image***************##############  
.push-backend-job:
  stage: Push
  tags:
    - renault-runner
 

  script:
    - cd ./back-end/RenaultEV_RestAPI/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build  -t "$BUILD_IMAGE_BACK":"$BUILD_DOCKER_IMAGE_VERSION" .
    - docker tag "$BUILD_IMAGE_BACK":"$BUILD_DOCKER_IMAGE_VERSION" "$CI_REGISTRY_IMAGE/$BUILD_IMAGE_BACK:$BUILD_DOCKER_IMAGE_VERSION"
    - docker push "$CI_REGISTRY_IMAGE/$BUILD_IMAGE_BACK:$BUILD_DOCKER_IMAGE_VERSION"



###############################################################################################################################
###############################################################################################################################



.run-dast-job:
    stage: runDASTScanUsingZAP
    tags:
      - renault-runner
    image: maven:3.8.5-openjdk-11-slim
    script: |
      apt-get update
      apt-get -y install wget
      wget https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2.11.1_Linux.tar.gz
      mkdir zap
      tar -xvf ZAP_2.11.1_Linux.tar.gz
      cd ZAP_2.11.1
      ./zap.sh -cmd -quickurl http://renaultapp.com  -quickprogress -quickout ../zap_report.html 
    artifacts:
      paths:
        - zap_report.html




.deploy:
  tags:
    - renault-runner
  
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
   
    - kubectl config get-contexts
    - kubectl config use-context houda99/renault-application:renault-agent
    - kubectl config current-context
    - kubectl apply -f ./back-end/RenaultEV_RestAPI/kubernetes
    - kubectl apply -f ./renaultApplication/kubernetes
    - kubectl apply -f ./Ingress-Context-Path-Based-Routing
    - kubectl get pods
  