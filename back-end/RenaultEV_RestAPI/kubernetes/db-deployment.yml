


# Define a 'Persistent Voulume Claim'(PVC) for postgresql Storage, dynamically provisioned by cluster

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk-pvc # name of PVC essential for identifying the storage data
  labels:
    app: postgresql
    tier: database
spec:
  accessModes:
  - ReadWriteOnce #This specifies the mode of the claim that we are trying to create.
  storageClassName: managed-premium-retain-sc 
  resources:
    requests:
      storage: 2Gi      #This will tell kubernetes about the amount of space we are trying to claim.



--- 
# Configure 'Deployment' of postgresql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  labels:
    app: postgresql
    tier: database
spec:
  selector: # postgresql Pod Should contain same labels
    matchLabels:
      app: postgresql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: postgresql
        tier: database
    spec:
      containers:
        - image: postgres # image from docker-hub
          imagePullPolicy: IfNotPresent
          #args:
            #- "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: postgresql
          env:
            - name: POSTGRES_PASSWORD
              valueFrom :
                secretKeyRef :
                  name : postgresql-secrets
                  key :  password

            - name: POSTGRES_USER
              valueFrom :
                secretKeyRef :
                  name : postgresql-secrets
                  key :  username

            - name: POSTGRES_DB # Setting Database Name from a 'ConfigMap'
              valueFrom :
                configMapKeyRef :
                  name : db-config
                  key :  dbName
            - name: POSTGRES_HOST   # Setting Database host address from configMap
              valueFrom :
                configMapKeyRef :
                  name : db-config
                  key :  host
        
          ports:
            - containerPort: 5432
              name: postgresql
          volumeMounts:
            - name: postgresql-persistent-storage
              mountPath: /var/lib/postgresql
            - name: postgresql-initdb
              mountPath: /docker-entrypoint-initdb.d
            #- name: sql-volume   # New volume mount for SQL file
             # mountPath: /sql    # Mount path inside the container
             # readOnly: true     # Set to read-only if appropriate
      volumes:
        - name: postgresql-persistent-storage # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: azure-managed-disk-pvc
            
        - name: postgresql-initdb
          configMap:
            name: db-config
       # - name: sql-volume    # New volume for SQL file
        #  azureFile:
         #   secretName: azure-storage-secret   # Secret containing Azure Storage account credentials
          #  shareName: myshare                 # Name of the Azure File Share
           # readOnly: true     
---
# Define a 'Service' To Expose postgresql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: postgresql  # DNS name
  labels:
    app: postgresql
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:       # mysql Pod Should contain same labels
    app: postgresql
    tier: database
  #clusterIP: None  # cd .We Use DNS, Thus ClusterIP is not relevant
  type: ClusterIP

---


